schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type Book {
  id: Int!
  title: String!
}

type Course {
  bookIds: [Int!]!
  books: [Book!]!
  id: Int!
  name: String
  university: University!
  universityId: Int
}

type Mutation {
  "adds a string to a list, and returns the list"
  addToList(value: String!): [String!]!
}

type Query {
  "Returns data and error fields, in the form of a Completable Future object"
  completableFutureDataAndErrors: String!
  "Returns data and error fields"
  returnDataAndError: String
  "Return list of books based on parameters options"
  searchBooks(params: BookSearchParametersInput!): [Book!]!
  "Return list of courses based on parameters options"
  searchCourses(params: CourseSearchParametersInput!): [Course!]!
  "Return list of universities based on parameters options"
  searchUniversities(params: UniversitySearchParametersInput!): [University!]!
}

type Subscription {
  "Return a random number every second"
  counter(limit: Int): Int!
  "Return a stream of valuess"
  multipleValue: Int!
  "Return a single value"
  singleValue: Int!
}

type University {
  id: Int!
  name: String
}

input BookSearchParametersInput {
  ids: [Int!]!
}

input CourseSearchParametersInput {
  ids: [Int!]!
}

input UniversitySearchParametersInput {
  ids: [Int!]!
}
